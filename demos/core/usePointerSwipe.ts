export default [
  {
    "name": "demo.vue",
    "scriptContent": "\nimport { computed, ref } from 'vue'\nimport { usePointerSwipe } from '@vueuse/core'\nimport type { SwipeDirection } from '../useSwipe'\n\nconst target = ref<Element | null>(null)\nconst container = ref<HTMLElement | null>(null)\n\nconst containerWidth = computed(() => container.value?.offsetWidth)\n\nconst left = ref('0')\nconst opacity = ref(1)\n\nconst reset = () => {\n  left.value = '0'\n  opacity.value = 1\n}\n\nconst { distanceX, isSwiping } = usePointerSwipe(target, {\n  onSwipe(e: PointerEvent) {\n    if (containerWidth.value) {\n      if (distanceX.value < 0) {\n        const distance = Math.abs(distanceX.value)\n        left.value = `${distance}px`\n        opacity.value = 1.25 - distance / containerWidth.value\n      }\n      else {\n        left.value = '0'\n        opacity.value = 1\n      }\n    }\n  },\n  onSwipeEnd(e: PointerEvent, direction: SwipeDirection) {\n    if (distanceX.value < 0 && containerWidth.value && (Math.abs(distanceX.value) / containerWidth.value) >= 0.5) {\n      left.value = '100%'\n      opacity.value = 0\n    }\n    else {\n      left.value = '0'\n      opacity.value = 1\n    }\n  },\n})\n",
    "templateContent": "\n  <div ref=\"container\" class=\"bg-gray-200 rounded relative w-full h-[80px] m-auto flex items-center justify-center overflow-hidden\">\n    <button @click=\"reset\">\n      Reset\n    </button>\n    <div\n      ref=\"target\"\n      class=\"absolute w-full h-full top-0 left-0 bg-[#3eaf7c] flex items-center justify-center\"\n      :class=\"{'transition-all duration-200 ease-linear': !isSwiping}\"\n      :style=\"{left, opacity}\"\n    >\n      <p class=\"flex text-white items-center\">\n        Swipe <mdi-arrow-right />\n      </p>\n    </div>\n  </div>\n",
    "path": "packages/core/usePointerSwipe/demo.vue"
  }
]

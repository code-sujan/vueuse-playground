export default [
  {
    "name": "demo.vue",
    "scriptContent": "\nimport { ref, watch } from 'vue'\nimport { useSpeechRecognition } from '@vueuse/core'\n\nconst lang = ref('en-US')\n\nfunction sample<T>(arr: T[], size: number) {\n  const shuffled = arr.slice(0)\n  let i = arr.length\n  let temp: T\n  let index: number\n  while (i--) {\n    index = Math.floor((i + 1) * Math.random())\n    temp = shuffled[index]\n    shuffled[index] = shuffled[i]\n    shuffled[i] = temp\n  }\n  return shuffled.slice(0, size)\n}\n\nconst colors = ['aqua', 'azure', 'beige', 'bisque', 'black', 'blue', 'brown', 'chocolate', 'coral', 'crimson', 'cyan', 'fuchsia', 'ghostwhite', 'gold', 'goldenrod', 'gray', 'green', 'indigo', 'ivory', 'khaki', 'lavender', 'lime', 'linen', 'magenta', 'maroon', 'moccasin', 'navy', 'olive', 'orange', 'orchid', 'peru', 'pink', 'plum', 'purple', 'red', 'salmon', 'sienna', 'silver', 'snow', 'tan', 'teal', 'thistle', 'tomato', 'turquoise', 'violet', 'white', 'yellow', 'transparent']\nconst grammar = `#JSGF V1.0; grammar colors; public <color> = ${colors.join(' | ')} ;`\n\nconst speech = useSpeechRecognition({\n  lang,\n  continuous: true,\n})\n\nconst color = ref('transparent')\n\nif (speech.isSupported) {\n  // @ts-expect-error missing types\n  const SpeechGrammarList = window.SpeechGrammarList || window.webkitSpeechGrammarList\n  const speechRecognitionList = new SpeechGrammarList()\n  speechRecognitionList.addFromString(grammar, 1)\n  speech.recognition!.grammars = speechRecognitionList\n\n  watch(speech.result, () => {\n    for (const i of speech.result.value.toLowerCase().split(' ').reverse()) {\n      if (colors.includes(i)) {\n        color.value = i\n        break\n      }\n    }\n  })\n}\n\nconst sampled = ref<string[]>([])\n\nconst start = () => {\n  color.value = 'transparent'\n  speech.result.value = ''\n  sampled.value = sample(colors, 5)\n  speech.start()\n}\n\nconst { isListening, isSupported, stop, result } = speech\n\nconst selectedLanguage = ref(lang.value)\nwatch(lang, lang => isListening.value ? null : selectedLanguage.value = lang)\nwatch(isListening, isListening => isListening ? null : selectedLanguage.value = lang.value)\n",
    "templateContent": "\n  <div>\n    <div v-if=\"!isSupported\">\n      Your browser does not support SpeechRecognition API,\n      <a\n        href=\"https://caniuse.com/mdn-api_speechrecognition\"\n        target=\"_blank\"\n      >more details</a>\n    </div>\n    <div v-else>\n      <div space-x-4>\n        <label class=\"radio\">\n          <input v-model=\"lang\" value=\"en-US\" type=\"radio\">\n          <span>English (US)</span>\n        </label>\n        <label class=\"radio\">\n          <input v-model=\"lang\" value=\"fr\" type=\"radio\">\n          <span>French</span>\n        </label>\n        <label class=\"radio\">\n          <input v-model=\"lang\" value=\"es\" type=\"radio\">\n          <span>Spanish</span>\n        </label>\n      </div>\n      <button v-if=\"!isListening\" @click=\"start\">\n        Press and talk\n      </button>\n      <button v-if=\"isListening\" class=\"orange\" @click=\"stop\">\n        Stop\n      </button>\n      <div v-if=\"isListening\" class=\"mt-4\">\n        <template v-if=\"selectedLanguage === 'en-US'\">\n          <note class=\"mb-2\">\n            <b>Please say a color</b>\n          </note>\n          <note class=\"mb-2\">\n            try: {{ sampled.join(', ') }}\n          </note>\n        </template>\n\n        <p v-else-if=\"selectedLanguage === 'es'\">\n          Speak some Spanish!\n        </p>\n\n        <p v-else-if=\"selectedLanguage === 'fr'\">\n          Speak some French!\n        </p>\n\n        <p\n          class=\"tag\"\n          :style=\"selectedLanguage === 'en-US' ? { background: color } : {}\"\n        >\n          {{ result }}\n        </p>\n      </div>\n    </div>\n  </div>\n",
    "styleContent": "\ninput {\n  --tw-ring-offset-width: 1px !important;\n  --tw-ring-color: #8885 !important;\n  --tw-ring-offset-color: transparent !important;\n}\n\n.radio {\n  @apply inline-flex items-center my-auto cursor-pointer select-none;\n}\n\n.radio input {\n  appearance: none;\n  padding: 0;\n  -webkit-print-color-adjust: exact;\n  color-adjust: exact;\n  display: inline-block;\n  vertical-align: middle;\n  background-origin: border-box;\n  user-select: none;\n  flex-shrink: 0;\n  height: 1rem;\n  width: 1rem;\n  @apply bg-gray-400/30;\n  @apply rounded-full h-4 w-4 select-none relative;\n  @apply mr-1;\n}\n\n.radio input:checked::after {\n  content: '';\n  @apply absolute inset-[3px] rounded-full bg-primary;\n}\n\n.checkbox span {\n  @apply ml-1.5 text-13px opacity-70;\n}\n",
    "path": "packages/core/useSpeechRecognition/demo.vue"
  }
]

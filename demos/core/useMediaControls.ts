export default [
  {
    "filename": "demo.vue",
    "script": "import { computed, reactive, ref } from 'vue'\nimport { stringify } from './utils'\nimport { useMediaControls } from '@vueuse/core'\nimport Scrubber from './Scrubber.vue'\nimport Menu from './Menu.vue'\nimport MenuItem from './MenuItem.vue'\nimport Spinner from './Spinner.vue'\n\nconst video = ref<HTMLVideoElement>()\nconst loop = ref(false)\nconst poster = 'https://bitmovin.com/wp-content/uploads/2016/06/sintel-poster.jpg'\n\nconst controls = useMediaControls(video, {\n  src: {\n    src: 'https://upload.wikimedia.org/wikipedia/commons/transcoded/f/f1/Sintel_movie_4K.webm/Sintel_movie_4K.webm.1080p.vp9.webm',\n    type: 'video/webm',\n  },\n  tracks: [\n    {\n      default: true,\n      src: 'https://gist.githubusercontent.com/wheatjs/a85a65a82d87d7c098e1a0972ef1f726/raw',\n      kind: 'subtitles',\n      label: 'English',\n      srcLang: 'en',\n    },\n    {\n      src: 'https://gist.githubusercontent.com/wheatjs/38f32925d20c683bf77ba33ff737891b/raw',\n      kind: 'subtitles',\n      label: 'French',\n      srcLang: 'fr',\n    },\n  ],\n})\n\nconst {\n  playing,\n  buffered,\n  currentTime,\n  duration,\n  tracks,\n  waiting,\n  selectedTrack,\n  volume,\n  muted,\n  isPictureInPicture,\n  supportsPictureInPicture,\n  togglePictureInPicture,\n  enableTrack,\n  disableTrack,\n} = controls\nconst text = stringify(reactive(controls))\nconst endBuffer = computed(() => buffered.value.length > 0 ? buffered.value[buffered.value.length - 1][1] : 0)\nconst formatDuration = (seconds: number) => new Date(1000 * seconds).toISOString().slice(14, 19)",
    "template": "<div\n    class=\"outline-none\"\n    :tabindex=\"0\"\n    autofocus\n    @keydown.prevent.space=\"playing = !playing\"\n    @keydown.right=\"currentTime += 10\"\n    @keydown.left=\"currentTime -= 10\"\n  >\n    <div class=\"mt-5 relative bg-black rounded-md shadow overflow-hidden\">\n      <video\n        ref=\"video\"\n        crossorigin=\"anonymous\"\n        class=\"w-full block\"\n        :poster=\"poster\"\n        :loop=\"loop\"\n        @click=\"playing = !playing\"\n      />\n      <div\n        v-if=\"waiting\"\n        class=\"absolute inset-0 grid place-items-center pointer-events-none bg-black bg-opacity-20\"\n      >\n        <Spinner />\n      </div>\n    </div>\n\n    <Scrubber v-model=\"currentTime\" :max=\"duration\" :secondary=\"endBuffer\" class=\"mt-2\">\n      <template #default=\"{ position, pendingValue }\">\n        <div\n          class=\"absolute transform -translate-x-1/2 bg-black rounded px-2 bottom-0 mb-4 py-1 text-xs text-white\"\n          :style=\"{ left: position }\"\n        >\n          {{ formatDuration(pendingValue) }}\n        </div>\n      </template>\n    </Scrubber>\n\n    <div class=\"flex flex-row items-center items-center\">\n      <button @click=\"playing = !playing\">\n        <i v-if=\"!playing\" inline-block align-middle i-carbon-play />\n        <i v-else i-carbon-pause inline-block align-middle />\n      </button>\n      <button @click=\"muted = !muted\">\n        <i v-if=\"muted\" i-carbon-volume-mute inline-block align-middle />\n        <i v-else i-carbon-volume-up inline-block align-middle />\n      </button>\n      <Scrubber v-model=\"volume\" :max=\"1\" class=\"w-32 ml-2\" />\n      <div\n        class=\"flex flex-col flex-1 text-sm ml-2\"\n      >\n        {{ formatDuration(currentTime) }} / {{ formatDuration(duration) }}\n      </div>\n\n      <Menu class=\"mr-2\">\n        <template #default=\"{ open }\">\n          <button @click=\"open\">\n            <i i-carbon-closed-caption inline-block align-middle />\n          </button>\n        </template>\n        <template #menu=\"{ close }\">\n          <div class=\"absolute bottom-0 right-0 bg-black rounded py-2 shadow\">\n            <MenuItem\n              @keydown.stop.prevent.enter.space=\"disableTrack()\"\n              @click=\"() => { disableTrack(); close() }\"\n            >\n              <span class=\"flex-1\">Off</span>\n              <i i-carbon-checkmark inline-block align-middle :class=\"{ 'opacity-0': selectedTrack !== -1 }\" />\n            </MenuItem>\n            <MenuItem\n              v-for=\"track in tracks\"\n              :key=\"track.id\"\n              @keydown.stop.prevent.enter.space=\"enableTrack(track)\"\n              @click=\"() => { enableTrack(track); close() }\"\n            >\n              <span class=\"flex-1\">{{ track.label }}</span>\n              <i i-carbon-checkmark inline-block align-middle :class=\"{ 'opacity-0': track.mode !== 'showing' }\" />\n            </MenuItem>\n          </div>\n        </template>\n      </Menu>\n      <Menu class=\"mr-2\">\n        <template #default=\"{ open }\">\n          <button class=\"block\" @click=\"open()\">\n            <i i-carbon-settings inline-block align-middle />\n          </button>\n        </template>\n        <template #menu=\"{ close }\">\n          <div class=\"absolute bottom-0 right-0 shadow py-2 bg-black rounded\">\n            <MenuItem\n              v-if=\"supportsPictureInPicture\"\n              @click=\"() => { togglePictureInPicture(); close(); }\"\n            >\n              <i i-carbon-popup />\n              <span>{{ isPictureInPicture ? 'Exit' : 'Enter' }} Picture in Picture</span>\n            </MenuItem>\n            <MenuItem @click=\"() => { loop = !loop; close(); }\">\n              <i i-carbon-repeat />\n              <span class=\"flex-1\">Loop</span>\n              <i v-if=\"loop\" i-carbon-checkmark />\n            </MenuItem>\n          </div>\n        </template>\n      </Menu>\n      <Menu>\n        <template #default=\"{ open }\">\n          <button class=\"block\" @click=\"open()\">\n            <i i-carbon-meter inline-block align-middle />\n          </button>\n        </template>\n        <template #menu=\"{ close }\">\n          <div class=\"absolute bottom-0 right-0 shadow py-2 bg-black rounded\">\n            <MenuItem @click=\"() => { controls.rate.value = 2; close(); }\">\n              <i i-carbon-meter-alt />2x\n            </MenuItem>\n            <MenuItem @click=\"() => { controls.rate.value = 1; close(); }\">\n              <i i-carbon-meter-alt />1x\n            </MenuItem>\n          </div>\n        </template>\n      </Menu>\n    </div>\n  </div>\n  <pre class=\"code-block\" lang=\"yaml\">{{ text }}</pre>"
  },
  {
    "filename": "Spinner.vue",
    "template": "<svg class=\"animate-spin -ml-1 mr-3 h-12 w-12 text-white\" fill=\"none\" viewBox=\"0 0 24 24\">\n    <circle\n      class=\"opacity-25\"\n      cx=\"12\"\n      cy=\"12\"\n      r=\"10\"\n      stroke=\"currentColor\"\n      stroke-width=\"4\"\n    />\n    <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" />\n  </svg>"
  },
  {
    "filename": "MenuItem.vue",
    "template": "<div class=\"px-4 py-2 whitespace-nowrap flex flex-row gap-2 items-center hover:bg-emerald-600 cursor-pointer\" :tabindex=\"0\">\n    <slot />\n  </div>"
  },
  {
    "filename": "Menu.vue",
    "script": "import { ref } from 'vue-demi'\nimport { onClickOutside, useEventListener } from '@vueuse/core'\n\nconst menu = ref()\nconst isOpen = ref()\n\nonClickOutside(menu, () => isOpen.value = false)\nuseEventListener('keydown', (e) => {\n  if (e.key === 'Escape' && isOpen)\n    isOpen.value = false\n})\n\nconst open = () => isOpen.value = true\nconst close = () => isOpen.value = false",
    "template": "<div class=\"relative\">\n    <slot :open=\"open\" />\n    <div ref=\"menu\" :class=\"{ 'pointer-events-none opacity-0': !isOpen }\">\n      <slot name=\"menu\" :isOpen=\"isOpen\" :close=\"close\" />\n    </div>\n  </div>"
  },
  {
    "filename": "Scrubber.vue",
    "script": "import { ref, watch } from 'vue-demi'\nimport { useEventListener, useMouseInElement, useVModel } from '@vueuse/core'\n\nconst scrubber = ref()\nconst scrubbing = ref(false)\nconst pendingValue = ref(0)\n\nuseEventListener('mouseup', () => scrubbing.value = false)\n\nconst emit = defineEmits(['update:modelValue'])\nconst props = defineProps({\n  min: { type: Number, default: 0 },\n  max: { type: Number, default: 100 },\n  secondary: { type: Number, default: 0 },\n  modelValue: { type: Number, required: true },\n})\n\nconst value = useVModel(props, 'modelValue', emit)\nconst { elementX, elementWidth } = useMouseInElement(scrubber)\n\nwatch([scrubbing, elementX], () => {\n  const progress = Math.max(0, Math.min(1, (elementX.value) / elementWidth.value))\n  pendingValue.value = progress * props.max\n  if (scrubbing.value)\n    value.value = pendingValue.value\n})",
    "template": "<div ref=\"scrubber\" class=\"relative h-2 rounded cursor-pointer select-none bg-black dark:bg-white dark:bg-opacity-10 bg-opacity-20\" @mousedown=\"scrubbing = true\">\n    <div class=\"relative overflow-hidden h-full w-full rounded\">\n      <div class=\"h-full absolute opacity-30 left-0 top-0 bg-emerald-700 w-full rounded\" :style=\"{ 'transform': `translateX(${ secondary / max * 100 - 100 }%)` }\" />\n      <div class=\"relative h-full w-full bg-emerald-500 rounded\" :style=\"{ 'transform': `translateX(${ value / max * 100 - 100 }%)` }\" />\n    </div>\n    <div class=\"absolute inset-0 hover:opacity-100 opacity-0\" :class=\"{ '!opacity-100': scrubbing }\">\n      <slot :pendingValue=\"pendingValue\" :position=\"`${Math.max(0, Math.min(elementX, elementWidth))}px`\" />\n    </div>\n  </div>"
  }
]

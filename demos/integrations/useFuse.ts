export default [
  {
    "filename": "demo.vue",
    "script": "import { computed, ref, watch } from 'vue'\nimport type { UseFuseOptions } from '.'\nimport { useFuse } from '.'\n\ninterface DataItem {\n  firstName: string\n  lastName: string\n}\n\nconst data = ref<DataItem[]>([\n  {\n    firstName: 'Roslyn',\n    lastName: 'Mitchell',\n  },\n  {\n    firstName: 'Cathleen',\n    lastName: 'Matthews',\n  },\n  {\n    firstName: 'Carleton',\n    lastName: 'Harrelson',\n  },\n  {\n    firstName: 'Allen',\n    lastName: 'Moores',\n  },\n  {\n    firstName: 'John',\n    lastName: 'Washington',\n  },\n  {\n    firstName: 'Brooke',\n    lastName: 'Colton',\n  },\n  {\n    firstName: 'Mary',\n    lastName: 'Rennold',\n  },\n  {\n    firstName: 'Nanny',\n    lastName: 'Field',\n  },\n  {\n    firstName: 'Chasity',\n    lastName: 'Michael',\n  },\n  {\n    firstName: 'Oakley',\n    lastName: 'Giles',\n  },\n  {\n    firstName: 'Johanna',\n    lastName: 'Shepherd',\n  },\n  {\n    firstName: 'Maybelle',\n    lastName: 'Wilkie',\n  },\n  {\n    firstName: 'Dawson',\n    lastName: 'Rowntree',\n  },\n  {\n    firstName: 'Manley',\n    lastName: 'Pond',\n  },\n  {\n    firstName: 'Lula',\n    lastName: 'Sawyer',\n  },\n  {\n    firstName: 'Hudson',\n    lastName: 'Hext',\n  },\n  {\n    firstName: 'Alden',\n    lastName: 'Senior',\n  },\n  {\n    firstName: 'Tory',\n    lastName: 'Hyland',\n  },\n  {\n    firstName: 'Constance',\n    lastName: 'Josephs',\n  },\n  {\n    firstName: 'Larry',\n    lastName: 'Kinsley',\n  },\n])\n\nconst search = ref('')\nconst filterBy = ref('both')\nconst keys = computed(() => {\n  if (filterBy.value === 'first')\n    return ['firstName']\n  else if (filterBy.value === 'last')\n    return ['lastName']\n  else return ['firstName', 'lastName']\n})\n\nconst resultLimit = ref<number | undefined>(undefined)\nconst resultLimitString = ref<string>('')\nwatch(resultLimitString, () => {\n  if (resultLimitString.value === '') {\n    resultLimit.value = undefined\n  }\n  else {\n    const float = parseFloat(resultLimitString.value)\n    if (!isNaN(float)) {\n      resultLimit.value = Math.round(float)\n      resultLimitString.value = resultLimit.value.toString()\n    }\n  }\n})\n\nconst exactMatch = ref(false)\nconst isCaseSensitive = ref(false)\nconst matchAllWhenSearchEmpty = ref(true)\n\nconst options = computed<UseFuseOptions<DataItem>>(() => ({\n  fuseOptions: {\n    keys: keys.value,\n    isCaseSensitive: isCaseSensitive.value,\n    threshold: exactMatch.value ? 0 : undefined,\n  },\n  resultLimit: resultLimit.value,\n  matchAllWhenSearchEmpty: matchAllWhenSearchEmpty.value,\n}))\n\nconst { results } = useFuse(search, data, options)",
    "template": "<div>\n    <input v-model=\"search\" placeholder=\"Search for someone...\" type=\"text\" w-full>\n    <div flex flex-wrap>\n      <div bg=\"dark:(dark-300) light-700\" mr-2 border=\"1 light-900 dark:(dark-700)\" rounded relative flex items-center>\n        <i i-carbon-filter absolute left-2 opacity-70 />\n        <select v-model=\"filterBy\" px-8 bg-transparent>\n          <option bg=\"dark:(dark-300) light-700\" value=\"both\">\n            Full Name\n          </option>\n          <option bg=\"dark:(dark-300) light-700\" value=\"first\">\n            First Name\n          </option>\n          <option bg=\"dark:(dark-300) light-700\" value=\"last\">\n            Last Name\n          </option>\n        </select>\n        <i i-carbon-chevron-down absolute right-2 pointer-events-none opacity-70 />\n      </div>\n      <span flex-1 />\n      <div flex flex-row flex-wrap gap-x-4>\n        <label class=\"checkbox\">\n          <input v-model=\"exactMatch\" type=\"checkbox\">\n          <span>Exact Match</span>\n        </label>\n        <label class=\"checkbox\">\n          <input v-model=\"isCaseSensitive\" type=\"checkbox\">\n          <span>Case Sensistive</span>\n        </label>\n        <label class=\"checkbox\">\n          <input v-model=\"matchAllWhenSearchEmpty\" type=\"checkbox\">\n          <span>Match all when empty</span>\n        </label>\n      </div>\n    </div>\n  </div>\n  <div mt-4>\n    <template v-if=\"results.length > 0\">\n      <div v-for=\"result in results\" :key=\"result.item.firstName + result.item.lastName\" py-2>\n        <div flex flex-col>\n          <span>\n            {{ result.item.firstName }} {{ result.item.lastName }}\n          </span>\n          <span text-sm opacity-50>\n            Score Index: {{ result.refIndex }}\n          </span>\n        </div>\n      </div>\n    </template>\n    <template v-else>\n      <div text-center pt-8 pb-4 opacity-80>\n        No Results Found\n      </div>\n    </template>\n  </div>",
    "style": "input {\n  --tw-ring-offset-width: 1px !important;\n  --tw-ring-color: #8885 !important;\n  --tw-ring-offset-color: transparent !important;\n}\n\n.checkbox {\n  @apply inline-flex items-center my-auto cursor-pointer select-none;\n}\n\n.checkbox input {\n  appearance: none;\n  padding: 0;\n  -webkit-print-color-adjust: exact;\n  color-adjust: exact;\n  display: inline-block;\n  vertical-align: middle;\n  background-origin: border-box;\n  user-select: none;\n  flex-shrink: 0;\n  height: 1rem;\n  width: 1rem;\n  @apply bg-gray-400/30;\n  @apply rounded-md h-4 w-4 select-none;\n}\n\n.checkbox input:checked {\n  background-image: url(\"data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z'/%3e%3c/svg%3e\");\n}\n\n.checkbox span {\n  @apply ml-1.5 text-13px opacity-70;\n}"
  }
]
